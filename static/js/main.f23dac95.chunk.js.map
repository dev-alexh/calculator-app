{"version":3,"sources":["logo.svg","components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["math","create","all","Calculator","props","state","number","operation","display","actualCalc","constructNum","bind","clear","mathOperation","decimalNum","resultCalculation","event","inputStr","target","value","this","setState","operArr","split","length","inputOperation","includes","endsWith","result","evaluate","toString","createButtonRow","array","map","element","index","Col","xs","Button","id","elemId","elemDisplay","onClick","elemClick","block","Container","fluid","Row","className","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f23dac95.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { create, all } from 'mathjs';\r\n\r\nconst math = create(all);\r\n\r\nexport class Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            number: \"0\",\r\n            operation: \"\",\r\n            display: \"0\",\r\n            actualCalc: \"\"\r\n        };\r\n\r\n        this.constructNum = this.constructNum.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n        this.mathOperation = this.mathOperation.bind(this);\r\n        this.decimalNum = this.decimalNum.bind(this);\r\n        this.resultCalculation = this.resultCalculation.bind(this);\r\n    }\r\n\r\n    constructNum(event) {\r\n        const inputStr = event.target.value;\r\n\r\n        this.setState((state) => {\r\n            if (state.operation != \"\") {\r\n                const operArr = state.operation.split(\"\");\r\n                if (operArr.length > 1) {\r\n                    if (operArr[operArr.length - 1] == \"-\") {\r\n                        return {\r\n                            number: inputStr,\r\n                            operation: \"\",\r\n                            display: state.display + inputStr,\r\n                            actualCalc:\r\n                                state.actualCalc +\r\n                                operArr[operArr.length - 2] +\r\n                                operArr[operArr.length - 1] +\r\n                                inputStr\r\n                        };\r\n                    } else {\r\n                        return {\r\n                            number: inputStr,\r\n                            operation: \"\",\r\n                            display: state.display + inputStr,\r\n                            actualCalc:\r\n                                state.actualCalc + operArr[operArr.length - 1] + inputStr\r\n                        };\r\n                    }\r\n                } else {\r\n                    return {\r\n                        number: inputStr,\r\n                        operation: \"\",\r\n                        display: state.display + inputStr,\r\n                        actualCalc: state.actualCalc + state.operation + inputStr\r\n                    };\r\n                }\r\n            }\r\n            if (state.number == \"0\") {\r\n                if (inputStr !== \"0\") {\r\n                    return {\r\n                        number: inputStr,\r\n                        operation: \"\",\r\n                        display: state.display + inputStr,\r\n                        actualCalc: state.actualCalc + inputStr\r\n                    };\r\n                }\r\n            } else {\r\n                return {\r\n                    number: state.number + inputStr,\r\n                    operation: \"\",\r\n                    display: state.display + inputStr,\r\n                    actualCalc: state.actualCalc + inputStr\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this.setState({\r\n            number: \"0\",\r\n            operation: \"\",\r\n            display: \"0\",\r\n            actualCalc: \"\"\r\n        });\r\n    }\r\n\r\n    mathOperation(event) {\r\n        const inputOperation = event.target.value;\r\n        this.setState((state) => {\r\n            if (state.operation == \"\") {\r\n                return {\r\n                    number: \"\",\r\n                    operation: inputOperation,\r\n                    display: state.display + inputOperation,\r\n                    actualCalc: state.actualCalc\r\n                };\r\n            } else {\r\n                return {\r\n                    number: \"\",\r\n                    operation: state.operation + inputOperation,\r\n                    display: state.display + inputOperation,\r\n                    actualCalc: state.actualCalc\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    decimalNum() {\r\n        this.setState((state) => {\r\n            if (!state.number.includes(\".\")) {\r\n                if (state.operation != \"\") {\r\n                    const operArr = state.operation.split(\"\");\r\n                    if (operArr.length > 1) {\r\n                        if (operArr[operArr.length - 1] == \"-\") {\r\n                            return {\r\n                                number: state.number + \".\",\r\n                                operation: \"\",\r\n                                display: state.display + \".\",\r\n                                actualCalc:\r\n                                    state.actualCalc +\r\n                                    operArr[operArr.length - 2] +\r\n                                    operArr[operArr.length - 1] +\r\n                                    \".\"\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                number: state.number + \".\",\r\n                                operation: \"\",\r\n                                display: state.display + \".\",\r\n                                actualCalc:\r\n                                    state.actualCalc + operArr[operArr.length - 1] + \".\"\r\n                            };\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            number: state.number + \".\",\r\n                            operation: \"\",\r\n                            display: state.display + \".\",\r\n                            actualCalc: state.actualCalc + state.operation + \".\"\r\n                        };\r\n                    }\r\n                }\r\n\r\n                else {\r\n                    return {\r\n                        number: state.number + \".\",\r\n                        operation: \"\",\r\n                        display: state.display + \".\",\r\n                        actualCalc: state.actualCalc + \".\"\r\n                    };\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    resultCalculation() {\r\n        this.setState((state) => {\r\n            if (state.actualCalc !== \"\" && !state.actualCalc.endsWith(\".\")) {\r\n                const result = math.evaluate(state.actualCalc).toString();\r\n                return {\r\n                    number: result,\r\n                    operation: \"\",\r\n                    display: result,\r\n                    actualCalc: result\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const createButtonRow = (array) => {\r\n            if (array.length == 4) {\r\n                return array.map((element, index) => (\r\n                    <Col xs={3} key={element.elemDisplay}>\r\n                        <Button\r\n                            id={element.elemId}\r\n                            value={element.elemDisplay}\r\n                            onClick={element.elemClick}\r\n                            block\r\n                        >\r\n                            {element.elemDisplay}\r\n                        </Button>\r\n                    </Col>\r\n                ));\r\n            } else {\r\n                return array.map((element, index) => (\r\n                    <Col xs={12} key={element.elemDisplay}>\r\n                        <Button\r\n                            id={element.elemId}\r\n                            value={element.elemDisplay}\r\n                            onClick={element.elemClick}\r\n                            block\r\n                        >\r\n                            {element.elemDisplay}\r\n                        </Button>\r\n                    </Col>\r\n                ));\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Container>\r\n                <h1> Complicated Calculator </h1>\r\n                <Container fluid id=\"calculator-box\">\r\n                    <Row className=\"mb-4\" id=\"displayScreen\">\r\n                        <Col xs={12}>\r\n                            <p id=\"displayOperations\">{this.state.display}</p>\r\n                            <p id=\"display\">\r\n                                {this.state.number ? this.state.number : this.state.operation}\r\n                            </p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mb-4\">\r\n                        {createButtonRow([\r\n                            {\r\n                                elemDisplay: \"7\",\r\n                                elemId: \"seven\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            {\r\n                                elemDisplay: \"8\",\r\n                                elemId: \"eight\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            {\r\n                                elemDisplay: \"9\",\r\n                                elemId: \"nine\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            { elemDisplay: \"+\", elemId: \"add\", elemClick: this.mathOperation }\r\n                        ])}\r\n                    </Row>\r\n                    <Row className=\"mb-4\">\r\n                        {createButtonRow([\r\n                            {\r\n                                elemDisplay: \"4\",\r\n                                elemId: \"four\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            {\r\n                                elemDisplay: \"5\",\r\n                                elemId: \"five\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            { elemDisplay: \"6\", elemId: \"six\", elemClick: this.constructNum },\r\n                            {\r\n                                elemDisplay: \"-\",\r\n                                elemId: \"subtract\",\r\n                                elemClick: this.mathOperation\r\n                            }\r\n                        ])}\r\n                    </Row>\r\n                    <Row className=\"mb-4\">\r\n                        {createButtonRow([\r\n                            { elemDisplay: \"1\", elemId: \"one\", elemClick: this.constructNum },\r\n                            { elemDisplay: \"2\", elemId: \"two\", elemClick: this.constructNum },\r\n                            {\r\n                                elemDisplay: \"3\",\r\n                                elemId: \"three\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            {\r\n                                elemDisplay: \"*\",\r\n                                elemId: \"multiply\",\r\n                                elemClick: this.mathOperation\r\n                            }\r\n                        ])}\r\n                    </Row>\r\n                    <Row className=\"mb-4\">\r\n                        {createButtonRow([\r\n                            {\r\n                                elemDisplay: \"0\",\r\n                                elemId: \"zero\",\r\n                                elemClick: this.constructNum\r\n                            },\r\n                            {\r\n                                elemDisplay: \".\",\r\n                                elemId: \"decimal\",\r\n                                elemClick: this.decimalNum\r\n                            },\r\n                            { elemDisplay: \"CE\", elemId: \"clear\", elemClick: this.clear },\r\n                            {\r\n                                elemDisplay: \"/\",\r\n                                elemId: \"divide\",\r\n                                elemClick: this.mathOperation\r\n                            }\r\n                        ])}\r\n                    </Row>\r\n                    <Row className=\"mb-4\">\r\n                        {createButtonRow([\r\n                            {\r\n                                elemDisplay: \"=\",\r\n                                elemId: \"equals\",\r\n                                elemClick: this.resultCalculation\r\n                            }\r\n                        ])}\r\n                    </Row>\r\n                    <footer>\r\n                        <p> Alex H, 2020. freeCodeCamp</p>\r\n                    </footer>\r\n                </Container>\r\n            </Container>\r\n        );\r\n    }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { Calculator } from './components/Calculator';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}